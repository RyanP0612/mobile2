import 'package:flutter/material.dart'; // Pacote para o sistema operacional android

// fun√ß√£o principal
void main() {
  // Run app √© a fun√ß√£o que vai chamar a tela do aplicativo
  runApp(
      NavBottom()); // Material APP √© a fun√ß√£o necess√°ria para chamar a classe criada
}

// Classe NavBottom do tipo stateless, pois n√£o tem widgets dinamicos
class NavBottom extends StatelessWidget {
  const NavBottom({super.key}); // construtor

  @override
  Widget build(BuildContext context) {
    // Scaffold √© o layout semipronto do aplicativo
    return MaterialApp(
        home: // app bar √© a barra do aplicativo

            NavigatorScreen());
  }
}

// Classe do tipo stateful
class NavigatorScreen extends StatefulWidget {
  const NavigatorScreen({super.key});

  @override
  // Variavel state que monitora os widgets da classe
  State<NavigatorScreen> createState() => _NavigatorScreenState();
}

class _NavigatorScreenState extends State<NavigatorScreen> {
  int selectIndex = 0;
  // TextStyle tipo de variavel para receber parametros de acordo com o tipo da fonte do texto

  // Cria uma lista de widgets para utilizar no navigator bar
  static const List<Widget> _widgetOptions = <Widget>[
    TelaIndustria("img/R&L.png"),
    CheckBox("img/trator.png"),
    rb("img/saude.png"),
    econ("img/cifrao.png"),
  ];
  // Fun√ßao que muda o index conforme o icone √© pressionado
  void showItemTrap(int index) {
    setState(() {
      selectIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    // Widget Scaffold
    return Scaffold(
        appBar: AppBar(
          title: Text("App Navigator Bar"),
        ),
        // Center centraliza o widget
        body: Center(
          // .elementAt permite passar um numero como index para o widget
          child: _widgetOptions.elementAt(selectIndex),
        ),
        // criar o bottom navigator

        bottomNavigationBar: BottomNavigationBar(
          // itens √© cada item do navigation bar
          items: const <BottomNavigationBarItem>[
            BottomNavigationBarItem(
              icon: Icon(Icons.apartment),
              label: 'Ind√∫stria',
              backgroundColor: Color.fromARGB(255, 94, 94, 94),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.agriculture),
              label: 'Agricultura',
              backgroundColor: Color.fromARGB(255, 22, 206, 31),
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.health_and_safety_outlined),
              label: 'Sa√∫de',
              backgroundColor: Colors.red,
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.business),
              label: 'Economia',
              backgroundColor: Color.fromARGB(255, 255, 191, 0),
            ),
          ],
          currentIndex: selectIndex,
          selectedItemColor: Colors.white,
          onTap: showItemTrap,
        ));
  }
}

class TelaIndustria extends StatefulWidget {
  final String imagem;
  const TelaIndustria(this.imagem, {super.key});

  @override
  State<TelaIndustria> createState() => _TelaIndustriaState();
}

class _TelaIndustriaState extends State<TelaIndustria> {
  String msg = "";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Center(
                child: Stack(
              alignment: AlignmentDirectional.center,
              children: [
                Container(
                  color: const Color.fromARGB(255, 0, 0, 0),
                  width: 320,
                  height: 220,
                ),
                Container(
                  color: Colors.blue,
                  width: 300,
                  height: 200,
                  child: Image.asset(
                    widget.imagem,
                    fit: BoxFit.fill,
                  ),
                ),
              ],
            )),
            Center(
                child: Stack(
              alignment: AlignmentDirectional.center,
              children: [
                Container(
                  color: const Color.fromARGB(255, 0, 0, 0),
                  width: 320,
                  height: 270,
                ),
                Container(
                    color: Colors.amberAccent,
                    width: 300,
                    height: 250,
                    child: Text("$msg",
                        style: TextStyle(fontSize: 17),
                        textAlign: TextAlign.left)),
              ],
            )),
            ElevatedButton(
                onPressed: () {
                  setState(() {
                    msg = "Seja bem-vindo a empresa R&L Company";
                  });
                },
                child: Text("Bem-vindo")),
            ElevatedButton(
                onPressed: () {
                  setState(() {
                    msg =
                        "   Desfrute dos irresist√≠veis sabores artesanais da R&L Company! Chocolates gourmet, bombons e balas que elevam o prazer √† excel√™ncia. Descubra tamb√©m nossa linha premium de suplementos de academia: prote√≠nas em p√≥ de alta qualidade e barras saborosas para impulsionar seus treinos.";
                  });
                },
                child: Text("Apresenta√ß√£o"))
          ]),
    );
  }
}

class CheckBox extends StatefulWidget {
  final String imagem;
  const CheckBox(this.imagem, {super.key});

  @override
  State<CheckBox> createState() => CheckBoxState();
}

class CheckBoxState extends State<CheckBox> {
  // variavel para armazenar o valor do check box

  bool ischeck = false;
  bool ischeck2 = false;
  String texto = '';
  String texto2 = '';
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            Center(
                child: Stack(
              alignment: AlignmentDirectional.center,
              children: [
                Container(
                  color: const Color.fromARGB(255, 0, 0, 0),
                  width: 320,
                  height: 220,
                ),
                Container(
                  width: 300,
                  height: 200,
                  child: Image.asset(
                    widget.imagem,
                    fit: BoxFit.fill,
                  ),
                  decoration: BoxDecoration(
                      gradient: LinearGradient(
                    begin: Alignment.topRight,
                    end: Alignment.bottomLeft,
                    colors: [
                      Colors.green,
                      Colors.lime,
                    ],
                  )),
                ),
              ],
            )),
            Container(
              height: 50,
              width: 320,
              color: Colors.amber,
              child: Text(
                "Pesquisa de prefer√™ncia, ro√ßa ou a cidade?",
                style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),
                textAlign: TextAlign.left,
              ),
            ),
            Stack(),
            Text(
              "Vote para ro√ßaüöúüåΩ",
              style: TextStyle(fontSize: 15),
            ),
            Checkbox(
                // Value √© o parametro do check box
                // ischeck variavel booleana que recebe o parametro value do check box
                value: ischeck,
                onChanged: (bool? value) {
                  setState(() {
                    ischeck = value!; //inverte o estado como uma porta not
                    if (ischeck == true) {
                      texto2 = "voc√™ votou na ro√ßa!!!";
                    } else {
                      texto2 = "";
                    } //inverte o estado como uma porta not
                  });
                }),
            Text(
              "$texto2",
              style: TextStyle(fontSize: 15),
            ),
            Text(""),
            Text(
              "Vote para cidadeüèôÔ∏èüèóÔ∏è",
              style: TextStyle(fontSize: 15),
            ),
            Checkbox(
                // Value √© o parametro do check box
                // ischeck variavel booleana que recebe o parametro value do check box
                value: ischeck2,
                onChanged: (bool? value2) {
                  setState(() {
                    ischeck2 = value2!;
                    if (ischeck2 == true) {
                      texto = "voc√™ votou na cidade!!!";
                    } else {
                      texto = "";
                    } //inverte o estado como uma porta not
                  });
                }),
            Text(
              "$texto",
              style: TextStyle(fontSize: 15),
            ),
          ],
        ),
      ),
    );
  }
}

class rb extends StatefulWidget {
  final String imagem;
  const rb(this.imagem, {super.key});

  @override
  State<rb> createState() => _rbState();
}

class _rbState extends State<rb> {
  int op = 0;
  String texto = "";
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(children: [
        Text(
          "Question√°rio",
          style: TextStyle(fontSize: 20),
        ),
        Container(
          color: Colors.blue,
          width: 300,
          height: 200,
          child: Image.asset(
            widget.imagem,
            fit: BoxFit.fill,
          ),
        ),
        Text("Quantos ossos existem no corpo humano?",
            style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold)),
        RadioListTile<int>(
            title: Text("155"),
            value: 1,
            groupValue: op,
            onChanged: (value) {
              setState(() {
                op = 1;
                texto = "Resposta errada, tente novamente!";
              });
            }),
        RadioListTile<int>(
            title: Text("202"),
            value: 2,
            groupValue: op,
            onChanged: (value) {
              setState(() {
                op = 2;
                texto = "Resposta errada, tente novamente!";
              });
            }),
        RadioListTile<int>(
            title: Text("206"),
            value: 3,
            groupValue: op,
            onChanged: (value) {
              setState(() {
                op = 3;
                texto =
                    "Certa a resposta, o corpo humano possui 206 ossos quando adulto!!!";
              });
            }),
        Text(
          "$texto",
          style: TextStyle(fontSize: 17, fontWeight: FontWeight.bold),
        )
      ]),
    );
  }
}

class econ extends StatefulWidget {
  final String imagem;
  const econ(this.imagem, {super.key});

  @override
  State<econ> createState() => _econState();
}

class _econState extends State<econ> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
        body: Center(
      child: Column(children: [
        Center(
          child: Stack(alignment: AlignmentDirectional.center, children: [
            Container(
              color: Colors.brown,
              height: 270,
              width: 320,
            ),
            Container(
              color: Colors.green,
              height: 250,
              width: 300,
              child: Image.asset(
                widget.imagem,
                fit: BoxFit.fill,
              ),
            )
          ]),
        ),
        Container(
            width: 320,
            height: 250,
            child: Text(
              "O Brasil atualmente √© a nona maior economia do mundo, possuindo um PIB de 2,17 trilh√µes dol√°res, mas mesmo assim n√£o podemos nos orgulhar tanto, pois temos pa√≠ses bem menores na nossa frente, tanto em popula√ß√£o, quanto em dimens√£o, como It√°lia, Fran√ßa, Reino Unido, Jap√£o e Alemanha.",
              style: TextStyle(fontSize: 15, fontWeight: FontWeight.bold),
            ),
            decoration: BoxDecoration(
                gradient: LinearGradient(
                    begin: Alignment.topRight,
                    end: Alignment.bottomLeft,
                    colors: [
                  Colors.lime,
                  Colors.green,
                ])))
      ]),
    ));
  }
}
